# Generated by mk-workflows.

name: 'windows-arm-qa'
on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: 'windows-arm-qa-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  windows-arm-qa-stable-all-features:
    runs-on: windows-11-arm
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env:
      SKIA_DEBUG: 0

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Clippy
      run: rustup component add clippy
      shell: bash

    - name: Python Version
      run: python --version

    - name: Python Platform
      run: python -c "import platform, sys; print('System:', platform.system()); print('Platform:', platform.platform()); print('Uname:', platform.uname()); print('sys.platform:', sys.platform)"

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "20.1.3"

    - name: Install Ninja
      run: choco install ninja
    - name: 'Install Rust target aarch64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add aarch64-pc-windows-msvc

    - name: 'Build skia-safe for aarch64-pc-windows-msvc with features d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=aarch64-pc-windows-msvc26-clang++.exe
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -vv -p skia-safe --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target aarch64-pc-windows-msvc
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy -vv --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target aarch64-pc-windows-msvc -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target aarch64-pc-windows-msvc -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: true
      run: |
        cargo run --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target aarch64-pc-windows-msvc "${{ env.SKIA_STAGING_PATH }}/skia-org" --driver cpu --driver pdf --driver svg
