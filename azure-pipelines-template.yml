parameters:
  # defaults:
  androidHost: ''
  androidNDK: ''

jobs:
- job: "${{ parameters.platform }}"
  timeoutInMinutes: 0

  strategy:
    matrix:
      stable:
        toolchain: stable
        features: ''
        exampleArgs: '--driver cpu --driver pdf'

      ${{ if eq(parameters.deployRelease, 'True') }}:
        stable-vulkan:
          toolchain: stable
          features: 'vulkan'
          exampleArgs: ''
        stable-svg:
          toolchain: stable
          features: 'svg'
          exampleArgs: ''
        stable-shaper:
          toolchain: stable
          features: 'shaper'
          exampleArgs: ''
        stable-textlayout:
          toolchain: stable
          features: 'textlayout'
          exampleArgs: ''

      ${{ if eq(parameters.deployRelease, 'False') }}:
        stable-all-features:
          toolchain: stable
          features: 'vulkan,svg,shaper,textlayout'
          exampleArgs: '--driver cpu --driver pdf --driver svg'
        beta-all-features:
          toolchain: beta
          features: 'vulkan,svg,shaper,textlayout'
          exampleArgs: ''

  variables:
    platform: ${{ parameters.platform }}
    platformTarget: ${{ parameters.platformTarget }}
    image: ${{ parameters.image }}
    androidHost: ${{ parameters.androidHost }}
    androidNDK: ${{ parameters.androidNDK }}
    androidAPILevel: ${{ parameters.androidAPILevel }}
    androidBinExt: ${{ parameters.androidBinExt }}
    rust_backtrace: 1

  pool:
    vmImage: $(image)

  steps:
  - ${{ if eq(parameters.platform, 'macOS') }}:
    # macOS
    - bash: |
        sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${TOOLCHAIN}
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install SDK Headers & Rust

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.x'
        addToPath: true
        architecture: 'x64'
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %TOOLCHAIN%
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        choco install llvm --version 8.0.0
      displayName: Install Rust and LLVM on Windows

  # All platforms (Linux images have Rust preinstalled and in the PATH).
  - bash: |
      set -e
      rustup default ${TOOLCHAIN}
      rustup update ${TOOLCHAIN}
      rustup component add clippy --toolchain ${TOOLCHAIN}
      rustup component add rustfmt --toolchain ${TOOLCHAIN}
      rustc -Vv
      cargo -V
    displayName: Update Rust, Install Clippy and Rustfmt and print Rust & Cargo Versions

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        clang --version
      displayName: LLVM/Clang Version

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        "C:/Program Files/LLVM/bin/clang.exe" --version
      displayName: LLVM/Clang Version

  - ${{ if ne(parameters.androidHost, '') }}:
    # Android NDK
    - bash: |
        set -e
        (cd ${HOME} && curl -sSf -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-$(androidNDK)-$(androidHost).zip)
        (cd ${HOME} && unzip android-ndk.zip)
        echo "##vso[task.setvariable variable=ANDROID_NDK;]${HOME}/android-ndk-$(androidNDK)"
        echo "##vso[task.setvariable variable=PATH;]${PATH}:${HOME}/android-ndk-$(androidNDK)/toolchains/llvm/prebuilt/$(androidHost)/bin"
      displayName: 'Install Android NDK $(androidNDK)'

  # Note: support to ignore specific rust files and directories is unstable yet: https://github.com/rust-lang/rustfmt/pull/2522
  - bash: |
      set -e
      echo "// WAITING FOR RUSTFMT.TOML TO SUPPORT IGNORING FILES" >skia-bindings/src/bindings.rs
      cargo fmt -- --check
      rm skia-bindings/src/bindings.rs
    displayName: Check Rust formatting

  - template: 'azure-pipelines-build-target.yml'
    parameters:
      target: '$(platformTarget)'
      exampleArgs: '$(exampleArgs)'
      runClippy: true
      runBinaries: true
      releaseBinaries: ${{ parameters.deployRelease }}

  - ${{ if eq(parameters.platform, 'macOS') }}:
    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-linux-android'
        androidEnv: true
        releaseBinaries: ${{ parameters.deployRelease }}

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'
        androidEnv: true
        releaseBinaries: ${{ parameters.deployRelease }}

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-apple-ios'
        releaseBinaries: ${{ parameters.deployRelease }}

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-apple-ios'
        releaseBinaries: ${{ parameters.deployRelease }}

  - ${{ if eq(parameters.platform, 'Linux') }}:
# TODO: Temporarily disabled, because of:
#       /home/vsts/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/8.0.7/include/arm_neon.h:37394:23:
#         error: use of undeclared identifier '__builtin_neon_vrndns_f32'
#       >> Builds fine on Ubuntu 18, though.
#
#    - template: 'azure-pipelines-build-target.yml'
#      parameters:
#        target: 'aarch64-linux-android'
#        androidEnv: true

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'
        androidEnv: true

# TODO: Windows Android builds are temporaly disabled, because of:
#       error occurred:
#         Failed to find tool. Is `aarch64-linux-android26-clang.cmd` installed?
#       >> works locally on msys2, probably a PATH problem with AZURE?, although PATH variable looks fine.
#  - ${{ if eq(parameters.platform, 'Windows') }}:
#    - template: 'azure-pipelines-build-target.yml'
#      parameters:
#        target: 'aarch64-linux-android'
#        androidEnv: true
#    - template: 'azure-pipelines-build-target.yml'
#      parameters:
#        target: 'x86_64-linux-android'
#        androidEnv: true
